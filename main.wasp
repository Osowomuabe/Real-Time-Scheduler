app RealTime_Transport_Schedular {
  wasp: {
    version: "^0.11.4"
  },
  title: "RealTime_Transport_Schedular",
  client: {
    rootComponent: import { Layout } from "@client/Layout.jsx"
  },
  db: {
    prisma: {
      clientPreviewFeatures: ["extendedWhereUnique"]
    }
  },
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {}
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/"
  }
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@client/pages/auth/Login.jsx"
}
route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import Signup from "@client/pages/auth/Signup.jsx"
}

entity User {=psl
    id       Int    @id @default(autoincrement())
    username String @unique
    password String
psl=}

entity Driver {=psl
    id              Int       @id @default(autoincrement())
    username        String    @unique
    password        String
    currentLocation String
    jobs            Job[]
    vehicles        Vehicle[]
psl=}

entity Vehicle {=psl
    id              Int    @id @default(autoincrement())
    driverId        Int
    driver          Driver @relation(fields: [driverId], references: [id])
    currentLocation String
    status          String
    jobs            Job[]
psl=}

entity Job {=psl
    id              Int      @id @default(autoincrement())
    description     String
    pickupLocation  String
    dropoffLocation String
    pickupTime      DateTime
    dropoffTime     DateTime
    status          String
    vehicleId       Int
    vehicle         Vehicle  @relation(fields: [vehicleId], references: [id])
    driver          Driver?  @relation(fields: [driverId], references: [id])
    driverId        Int?
psl=}

action createJob {
  fn: import { createJob } from "@server/actions.js",
  entities: [Job, Vehicle]
}

action updateJobStatus {
  fn: import { updateJobStatus } from "@server/actions.js",
  entities: [Job]
}

action updateVehicleStatus {
  fn: import { updateVehicleStatus } from "@server/actions.js",
  entities: [Vehicle]
}

query getJob {
  fn: import { getJob } from "@server/queries.js",
  entities: [Job]
}

query getVehicle {
  fn: import { getVehicle } from "@server/queries.js",
  entities: [Vehicle]
}

route DashboardRoute { path: "/", to: DashboardPage }
page DashboardPage {
  component: import { DashboardPage } from "@client/pages/DashboardPage.jsx",
  authRequired: true
}

route DriverRoute { path: "/driver/:driverId", to: DriverPage }
page DriverPage {
  component: import { Driver } from "@client/pages/Driver.jsx",
  authRequired: true
}